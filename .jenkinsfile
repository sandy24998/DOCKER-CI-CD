pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                checkout scm // Jenkins automatically checks out the source code 
            }
        }
        stage('Clean Up') {
    steps {
        // Stop and remove all containers with the name "flask-app"
        sh '''
            docker ps -a -q --filter "name=flask-app" | xargs -r docker rm || true
            docker ps -a -q --filter "name=flask-app" | xargs -r docker stop || true
            docker images -q flask-app:latest | xargs -r docker rmi -f || true
            docker images -f "dangling=true" -q | xargs -r docker rmi || true

        '''
    }
}

        stage('Docker Build') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DockerHubCred', 
                    usernameVariable: 'DOCKER_USER', 
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    // Use the credentials to login and build the image 
                    sh '''
                        docker build -t $DOCKER_USER/flask-app:latest .
                    '''
                }
            }
        }
        stage('Push to Dockerhub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DockerHubCred', 
                    usernameVariable: 'DOCKER_USER', 
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker push $DOCKER_USER/flask-app:latest
                    '''
                }
            }
        }
        stage('Deploy') {
            steps {
                sh 'docker-compose down && docker-compose up -d'
            }
        }
    }
}
